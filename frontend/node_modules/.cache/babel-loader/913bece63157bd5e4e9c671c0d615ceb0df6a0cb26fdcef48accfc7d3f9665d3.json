{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\chatbot\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { io } from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://localhost:5000\");\nfunction ChatApp() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  useEffect(() => {\n    const fetchmessages = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/api/messages');\n        const data = await response.json();\n        console.log(data);\n      } catch (err) {\n        console.error('Error fetching messages:', err);\n      }\n    };\n    fetchmessages();\n    socket.on('botReply', data => {\n      setMessages(prev => [...prev, {\n        from: 'bot',\n        text: data.text\n      }]);\n    });\n    return () => {\n      socket.off('botReply');\n    };\n  }, []);\n  const sendMessage = async () => {\n    if (input.trim()) {\n      setMessages(prev => [...prev, {\n        from: 'user',\n        text: input\n      }]);\n      socket.emit('sendMessage', {\n        text: input\n      });\n      await fetch('http://localhost:5000/api/messages', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text: \"Hello\"\n        })\n      });\n      setInput('');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Chatbot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: \"300px\",\n        overflowY: \"scroll\"\n      },\n      children: messages.map((msg, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [msg.from, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 24\n        }, this), \" \", msg.text]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      value: input,\n      onChange: e => setInput(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendMessage,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatApp, \"9O8vdW2/zxnqNWKJ7NIr/2i0F2U=\");\n_c = ChatApp;\nexport default ChatApp;\nvar _c;\n$RefreshReg$(_c, \"ChatApp\");","map":{"version":3,"names":["React","useState","useEffect","io","jsxDEV","_jsxDEV","socket","ChatApp","_s","messages","setMessages","input","setInput","fetchmessages","response","fetch","data","json","console","log","err","error","on","prev","from","text","off","sendMessage","trim","emit","method","headers","body","JSON","stringify","children","fileName","_jsxFileName","lineNumber","columnNumber","style","height","overflowY","map","msg","i","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["D:/project/chatbot/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { io } from \"socket.io-client\";\n\n\nconst socket = io(\"http://localhost:5000\");\n\nfunction ChatApp() {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n\n  useEffect(() => {\n\n    const fetchmessages = async () => {\n\n      try {\n\n        const response = await fetch('http://localhost:5000/api/messages');\n        const data = await response.json();\n        console.log(data);\n\n      } catch (err) {\n        console.error('Error fetching messages:', err);\n      }\n\n    };\n\n    fetchmessages();\n\n\n    socket.on('botReply', (data) => {\n      setMessages(prev => [...prev, { from: 'bot', text: data.text }]);\n    });\n\n    return () => {\n      socket.off('botReply');\n    }\n  }, []);\n\n  const sendMessage = async () => {\n    if (input.trim()) {\n      setMessages(prev => [...prev, { from: 'user', text: input }]);\n      socket.emit('sendMessage', { text: input });\n     \n\n      await fetch('http://localhost:5000/api/messages', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ text: \"Hello\" })\n\n      });\n\n      setInput('');\n    }\n  };\n\n  return (\n    <div>\n      <h2>Chatbot</h2>\n      <div style={{ height: \"300px\", overflowY: \"scroll\" }}>\n        {messages.map((msg, i) => (\n          <div key={i}><strong>{msg.from}:</strong> {msg.text}</div>\n        ))}\n      </div>\n      <input value={input} onChange={e => setInput(e.target.value)} />\n      <button onClick={sendMessage}>Send</button>\n    </div>\n  );\n}\n\nexport default ChatApp;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}